{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isStarted","setIsStarted","NONE","sortType","setSortType","isReversed","setIsReversed","className","type","onClick","ALPABET","LENGTH","goods","visibleGoods","sort","goodA","goodB","localeCompare","length","reverse","getReorderedGoods","map","good","href","ReactDOM","render","document","getElementById"],"mappings":"kMAkBKA,E,0DAbCC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAME,IAAME,EAAgB,WAC3B,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCL,oBAAS,GAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KA8BA,OACE,yBAASC,UAAU,uBAAnB,SACIP,EAWE,qCACE,mBAAGO,UAAU,2BAAb,0BAIA,sBAAKA,UAAU,aAAf,UACE,wBACEA,UAAU,kBACVC,KAAK,SACLC,QAAS,kBAAML,EAAYR,EAASc,UAHtC,iCAQA,wBACEH,UAAU,kBACVC,KAAK,SACLC,QAAS,kBAAML,EAAYR,EAASe,SAHtC,4BAQA,wBACEJ,UAAU,kBACVC,KAAK,SACLC,QAAS,WA9CrBH,GAAeD,IA2CL,qBAQA,wBACEE,UAAU,4BACVC,KAAK,SACLC,QAAS,kBAlDrBL,EAAYR,EAASM,WACrBI,GAAc,IA8CJ,sBASF,qBAAKC,UAAU,QAAf,SAhFV,SAA2BK,GACzB,IAAMC,EAAY,YAAOD,GAEzB,OAAQT,GACN,KAAKP,EAASc,QACZG,EAAaC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MACxD,MAEF,KAAKpB,EAASe,OACZE,EAAaC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMG,OAASF,EAAME,UAO7D,OAAOb,EAAaQ,EAAaM,UAAYN,EAiElCO,CAAkBvB,GAAiBwB,KAAI,SAAAC,GAAI,OAC1C,mBACEC,KAAK,QAELhB,UAAU,0BAHZ,SAKGe,GAHIA,WApDb,wBACEf,UAAU,uCACVC,KAAK,SACLC,QAAS,kBAAMR,GAAa,IAH9B,sBC1DVuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1e6630d1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport './App.scss';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\nexport const App: React.FC = () => {\n  const [isStarted, setIsStarted] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  function getReorderedGoods(goods: string[]) {\n    const visibleGoods = [...goods];\n\n    switch (sortType) {\n      case SortType.ALPABET:\n        visibleGoods.sort((goodA, goodB) => goodA.localeCompare(goodB));\n        break;\n\n      case SortType.LENGTH:\n        visibleGoods.sort((goodA, goodB) => goodA.length - goodB.length);\n        break;\n\n      default:\n        break;\n    }\n\n    return isReversed ? visibleGoods.reverse() : visibleGoods;\n  }\n\n  function reverse() {\n    setIsReversed(!isReversed);\n  }\n\n  function reset() {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  }\n\n  return (\n    <article className=\"App panel is-warning\">\n      {!isStarted\n        ? (\n          <button\n            className=\"button is-large is-info is-fullwidth\"\n            type=\"button\"\n            onClick={() => setIsStarted(true)}\n          >\n            Start\n          </button>\n        )\n        : (\n          <>\n            <p className=\"App__title panel-heading\">\n              Shoping-list\n            </p>\n\n            <div className=\"panel-tabs\">\n              <button\n                className=\"button is-white\"\n                type=\"button\"\n                onClick={() => setSortType(SortType.ALPABET)}\n              >\n                Sort alphabetically\n              </button>\n\n              <button\n                className=\"button is-white\"\n                type=\"button\"\n                onClick={() => setSortType(SortType.LENGTH)}\n              >\n                Sort by length\n              </button>\n\n              <button\n                className=\"button is-white\"\n                type=\"button\"\n                onClick={() => reverse()}\n              >\n                Reverse\n              </button>\n\n              <button\n                className=\"button is-danger is-light\"\n                type=\"button\"\n                onClick={() => reset()}\n              >\n                Reset\n              </button>\n            </div>\n\n            <div className=\"Goods\">\n              {getReorderedGoods(goodsFromServer).map(good => (\n                <a\n                  href=\"#test\"\n                  key={good}\n                  className=\"Goods__item panel-block\"\n                >\n                  {good}\n                </a>\n              ))}\n            </div>\n          </>\n        )}\n    </article>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}